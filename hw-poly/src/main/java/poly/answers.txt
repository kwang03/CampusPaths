## CSE 331 hw-poly Questions
## Part 0
###########################################################################

1. Multiplication Pseudocode
r = p*q:
    {Inv: r = q * [p_0 + ... + p_{j-1}] where p_j is the jth term in p}
    for each term t_p in p:
        define an empty polynomial i
        {Inv: i = t_p *[q_0 + ... + q_{k - 1}] where q_k is the kth term in q}
        for each term t_q in q:
            add the result of t_p * t_q to i as a new term
        use polynomial addition to add i to r


2. Division Pseudocode

q = u/v:
    if u or v is NaN or v is 0:
        then return a NaN polynomial
    set r = u by making a term-by-term copy of all terms in u to r
    q is an initially empty (zero) polynomial
    t = first term in v
    {Inv: u = q * v + r}
    while the first term in r's degree is greater than or equal to t's degree and r has at least one term:
        d = the first term in r divided by t
        add d to q (d is equivalent to a single-term polynomial, so we can use poly-poly addition)
        m = d multiplied by v (d is equivalent to a single-term polynomial, so we can use poly-poly multiplication)
        m = -1 multiplied by m (-1 can be treated as a single-term polynomial, so we can use poly-poly multiplication)
        set r to be the sum of m and r

3. Division Example: (x3+x-1) / (x+1) = x2-x+2
    u = (x^3+x-1)
    v = (x+1)
    r = copy of u = (x^3+x-1)
    q = (0)
    t = x
    while first term in r's degree is greater than or equal to t's degree:
        Iteration 1:
            [d = the first term in r divided by t] d = x^2
            [add d to q] q = x^2
            [m = d multiplied by v] m = x^3 + x^2
            [m = -1 multiplied by m] m = -x^3 - x^2
            [set r to be sum of m and r] r = -x^2 + x - 1
        Iteration 2:
            [d = the first term in r divided by t] d = -x
            [add d to q] q = x^2 - x
            [m = d multiplied by v] m = -x^2 -x
            [m = -1 multiplied by m] m = x^2 + x
            [set r to be sum of m and r] r = 2x - 1
        Iteration 3:
            [d = the first term in r divided by t] d = 2
            [add d to q] q = x^2 - x + 2
            [m = d multiplied by v] m = 2x + 2
            [m = -1 multiplied by m] m = -2x - 2
            [set r to be sum of m and r] r = -3
    We are done! q = x^2 - x + 2



## Part 1
###########################################################################

1. Weakened Rep Invariant
Methods/Constructors that must change: checkRep(), toString(), hashCode(), equals(Object obj)
checkRep() must change with the new invariant by removing the check to see if the RatNum
is in lowest form or not. By removing a condition to check, the method is more technically more efficient.

toString() must change by first finding the reduced form of the RatNum before returning the ratio String. This
change would make the toString method less efficient and harder to understand due to the added steps.

hashCode() must change by first finding the reduced values of numer and denom before returning the hashcode. This
change would again make the hashCode method less efficient and harder to understand due to added steps.

equals() must change by first finding the reduced values of numer and denom of both this and obj before evaluating
whether they are both the same. This again would be adding steps to the equals method which would decrease
efficiency and make it harder to understand.

Method/Constructors that can change: RatNum(int n), RatNum(int n, int d),
RatNum(int n) can change in that we can multiply numer and denom by the same constant when assigning
their values since the RatNum no longer has to be in reduced form. This however would be a odd change
to make because it just makes our code less clear and our represented number more complicated.

RatNum(int n, int d) can change in the else branch by removing the code to reduce the ratio to lowest
terms. This change could be one we might consider because it would mean that the numerator and denominator
given by the client are the ones that we actually store.

2. Alternate add, sub, mul, div
The new changes would fail to meet the specifications of the methods because the specifications do not call for
this to be modified (no @spec.modifies) but with the new implementation we would be changing this. Furthermore it would violate the
specifications of the class because RatNum is supposed to be immutable but these changed methods would in
fact mutate instances of the class.

3. Constructor checkReps
We only need to call checkRep() at the end of the constructors because the object is immutable. None of the methods
will change the object and therefore none of the methods will make the object violate the representation invariant.
Since the fields are final, as soon as they are set in the constructor they won't be changed.



## Part 2
###########################################################################

1. Calls to checkRep in RatTerm
I only call checkRep at the end of my constructor. This is because similar to RatNum, RatTerm
is immutable meaning that none of the methods will change the fields of the object after it is
constructed. Therefore it won't be the case that the methods will make changes that will cause
violations to the representation invariant and therefore we do not need to call checkRep.


2. Weakened Rep Invariant
Methods/constructors that must change: add(RatTerm arg), toString(), hashCode(), equals(Object obj), checkRep()

add(RatTerm arg) must change in that in the case where one of the two terms is 0 we must first find which term is
the non-zero one and then only use that term's exponent in the returned RatTerm. This change would require additional
if else branches and therefore would make the code harder to understand and less efficient.

toString() must change in that we must add an additional branch for if c is equal to zero in which case we would append
to our output "0". This change is adding an additional branch to our method which would've been unnecessary if we hadn't
changed our invariant making our code harder to understand and slightly less efficient.

hashCode() must change so that all instances of the 0 term return the same hash code, this can be done by first identifying
if the coefficient is 0 and if so then returning a specific value. This change adds more case handling in the method which
makes the method more complicated and inefficient.

equals(Object obj) must change to handle the case where two instances of zeros are to be compared where they have different
exponents. This can be done by specifically adding case handling of when coefficient = 0 to return true no matter the exponent.
This change increases case handling in the method and increases complication and inefficiencies.

checkRep() must change by no longer checking to make sure that expt is 0 when coeff is 0. This reduces the number of conditions
to be checked whenever the representation invariant is checked which slightly simplifies the code and slightly increases
efficiency.

Methods/constructors that can change: RatTerm(RatNum c, int e)

RatTerm(RatNum c, int e) can change in that we can remove the if branch that sets expt to 0 if c is 0. This change
will make the code clearer because the constructor would just simply be setting the fields equal to the parameters and
slightly more efficient due to reduced code.



3. Alternate Rep Invariant
Methods/constructors that must change:RatTerm(RatNum c, int e), checkRep()
RatTerm(RatNum c, int e) must change so that if the coefficient is NaN, we set the expt field to be 0. This change just means
adding an extra condition in the if statement which would have little to no change in code clarity/efficiency.

checkRep() must change to check that when the RatTerm is NaN, the expt field is also 0. This just adds one more assertion to
checkRep() which barely decreases understandability/efficiency of the code.


4. Preferred Invariants
I prefer none of the additional invariants because none of them overall increases the understandability or efficiency of the
code. The changed invariants either increase the complexity of methods or make little to no improvements to the methods making
them not worth to change to.



## Part 3
###########################################################################

1. Calls to checkRep in RatPoly



2. Alternate Representation



